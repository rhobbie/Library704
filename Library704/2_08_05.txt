.Module 2_08_05	// 2.08.05 STG REG(1-8) -> ADDER & STG REG(9-35) -> ADDER
2_08_05_[A-D][1-8] : 2_08_05

P 1
// MF1 J27 9130 07
// MF1 A35 9043 01 03A 04-05 06A 07-08

.Signals
I 2_08_05_A1 ADD/SUB, (E9 UNTIL CT2)
I 2_08_05_A2 MPY/MPYR ADR CTR NOT ZERO  [SR(1-35) -> ADDERS]
I 2_08_05_A3 DIVIDE ER TIME [SR(1-35) -> ADDERS]
I 2_08_05_A4 F.P. ADD/SUB, 1ST STEP [STG R(1-35) -> ADDERS]
I 2_08_05_A5 F.P. ADD/SUB  3RD STEP [STG REG(1-35) -> ADDERS][ERO[D6]]
I 2_08_05_A6 ER0(D6)
I 2_08_05_A7 FP MPY FIRST STEP [STG REG (1-8) -> ADDERS] [ER0(D4)], [ER6(D4)]
I 2_08_05_A8 ER0(D4)
I 2_08_05_B1 ER6(D4)
O 2_08_05_B2 STG REG(1-8) -> ADDER
O 2_08_05_B3 STG REG(9-35) -> ADDER
I 2_08_05_B4 F.P. MPY 2ND STEP SHIFT COUNTER NOT ZERO [STG REG (9-35) -> ADDERS]
I 2_08_05_B5 F.P. DIVIDE 1ST STEP [STORAGE REG(9-35)-> ADDERS][ER0(D4)]
I 2_08_05_B6 F.P DIVIDE, 1ST STEP, Ti OFF [STG REG(1-8) -> ADDERS][ER6(D4)]
I 2_08_05_B7 F.P DIVIDE 2ND STEP [STG REG(9-35)-> ADDER][ER6(D4)]
I 2_08_05_B8 F.P DIVIDE 3RD STEP [STG REG(9-35)-> ADDER]
I 2_08_05_C1 F.P DIVIDE 4TH STEP [STG REG(9-35)-> ADDER][ER0(D4)]
I 2_08_05_C2 AND TO ACC/STG [STG REG -> ADDER] [ER0(D6)]
I 2_08_05_C3 AND TO STG CNTL [STG REG -> ADDER E0(D4)](E6 D4)
I 2_08_05_C4 E0(D4)
I 2_08_05_C5 PRI OPN (O4) ADDER CNTL. [SR -> ADDERS]
I 2_08_05_C6 STG REG -> ADDERS (CAS CNTL)
I 2_08_05_C7 CLEAR AND ADD/AND CNTL [STG REG(1-35) -> ADDERS]
I 2_08_05_C8 INDEXING OPERATION STG REG(1-35) -> ADDERS(1-35)
I 2_08_05_D1 E TIME
I 2_08_05_D2 MINUS A5(D1) OR 11(D1) PWD
I 2_08_05_D3 MINUS ER0(D4)
I 2_08_05_D4 I0(D4)
I 2_08_05_D5 LATE A6(D4)
I 2_08_05_D6 E9 TILL CT2
I 2_08_05_D7 ER3(D4)
I 2_08_05_D8 PRI OPN [36] ADD AND CARRY LOGICAL WORD

.Connect
W 2_08_05_D6 P1 // E9 TILL CT2
W P1 2_08_05_B2 // STG REG(1-8) -> ADDER
W P1 2_08_05_B3 // STG REG(9-35) -> ADDER


// unknown
1MEG 2_08_05_A1 0V // ADD/SUB, (E9 UNTIL CT2)
1MEG 2_08_05_A2 0V // MPY/MPYR ADR CTR NOT ZERO  [SR(1-35) -> ADDERS]
1MEG 2_08_05_A3 0V // DIVIDE ER TIME [SR(1-35) -> ADDERS]
1MEG 2_08_05_A4 0V // F.P. ADD/SUB, 1ST STEP [STG R(1-35) -> ADDERS]
1MEG 2_08_05_A5 0V // F.P. ADD/SUB  3RD STEP [STG REG(1-35) -> ADDERS][ERO[D6]]
1MEG 2_08_05_A6 0V // ER0(D6)
1MEG 2_08_05_A7 0V // FP MPY FIRST STEP [STG REG (1-8) -> ADDERS] [ER0(D4)], [ER6(D4)]
1MEG 2_08_05_A8 0V // ER0(D4)
1MEG 2_08_05_B1 0V // ER6(D4)
1MEG 2_08_05_B4 0V // F.P. MPY 2ND STEP SHIFT COUNTER NOT ZERO [STG REG (9-35) -> ADDERS]
1MEG 2_08_05_B5 0V // F.P. DIVIDE 1ST STEP [STORAGE REG(9-35)-> ADDERS][ER0(D4)]
1MEG 2_08_05_B6 0V // F.P DIVIDE, 1ST STEP, Ti OFF [STG REG(1-8) -> ADDERS][ER6(D4)]
1MEG 2_08_05_B7 0V // F.P DIVIDE 2ND STEP [STG REG(9-35)-> ADDER][ER6(D4)]
1MEG 2_08_05_B8 0V // F.P DIVIDE 3RD STEP [STG REG(9-35)-> ADDER]
1MEG 2_08_05_C1 0V // F.P DIVIDE 4TH STEP [STG REG(9-35)-> ADDER][ER0(D4)]
1MEG 2_08_05_C2 0V // AND TO ACC/STG [STG REG -> ADDER] [ER0(D6)]
1MEG 2_08_05_C3 0V // AND TO STG CNTL [STG REG -> ADDER E0(D4)](E6 D4)
1MEG 2_08_05_C4 0V // E0(D4)
1MEG 2_08_05_C5 0V // PRI OPN (O4) ADDER CNTL. [SR -> ADDERS]
1MEG 2_08_05_C6 0V // STG REG -> ADDERS (CAS CNTL)
1MEG 2_08_05_C7 0V // CLEAR AND ADD/AND CNTL [STG REG(1-35) -> ADDERS]
1MEG 2_08_05_C8 0V // INDEXING OPERATION STG REG(1-35) -> ADDERS(1-35)
1MEG 2_08_05_D1 0V //  E TIME
1MEG 2_08_05_D2 0V // MINUS A5(D1) OR 11(D1) PWD
1MEG 2_08_05_D3 0V // MINUS ER0(D4)
1MEG 2_08_05_D4 0V // I0(D4)
1MEG 2_08_05_D5 0V // LATE A6(D4)
1MEG 2_08_05_D6 0V // E9 TILL CT2
1MEG 2_08_05_D7 0V // ER3(D4)
1MEG 2_08_05_D8 0V // PRI OPN [36] ADD AND CARRY LOGICAL WORD







.End