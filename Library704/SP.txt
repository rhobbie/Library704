.Module SP
SP[1-150] SPR1 SP_RES : SP
.Signals

// 1.04.05


// 1.05.02
I SP28 Read in Sample 

I SP53 RO Sample

// 1.05.03
I SP30 Reset SAR & Buffer Reg
I SP51 SAR RI & Turn on Rd Bias Gate 

// 1.06.02 ??
O SPR1 STG START / STOP CNTL

// 2.05.01 STORAGE BUS SWITCHING COLUMN S
B SP69 STG BUS (S)

// 2.05.02 STORAGE BUS SWITCHING COLUMNS (1,2,18,19,20)
B SP85  STG BUS (1)
B SP101 STG BUS (2)
B SP76  STG BUS (18)
B SP92  STG BUS (19)
B SP108 STG BUS (20)

// 2.05.03 STORAGE BUS SWITCHING COLUMNS (21-35),(3-17)
B SP117 STG BUS (3)
B SP133 STG BUS (4)
B SP149 STG BUS (5)
B SP78  STG BUS (6)
B SP94  STG BUS (7)
B SP110 STG BUS (8)
B SP126 STG BUS (9)
B SP142 STG BUS (10)
B SP119 STG BUS (11)
B SP67  STG BUS (12)
B SP83  STG BUS (13)
B SP99  STG BUS (14)
B SP115 STG BUS (15)
B SP131 STG BUS (16)
B SP147 STG BUS (17)
B SP124 STG BUS (21)
B SP140 STG BUS (22)
B SP128 STG BUS (23)
B SP65  STG BUS (24)
B SP81  STG BUS (25)
B SP97  STG BUS (26)
B SP113 STG BUS (27)
B SP129 STG BUS (28)
B SP144 STG BUS (29)
B SP74  STG BUS (30)
B SP90  STG BUS (31)
B SP106 STG BUS (32)
B SP122 STG BUS (33)
B SP138 STG BUS (34)
B SP135 STG BUS (35)

// 2.07.23 OR TO STORAGE EXEC CNTL
I SP64 OR TO STORAGE CNTL 

// 3.42 ADDRESSS REGISTER

I SP87 MINUS ON ADR LINE 5
I SP80 ADR LINE 5
I SP7 ADR LINE 6
I SP16 ADR LINE 7
I SP5 ADR LINE 8
I SP14 ADR LINE 9
I SP3 ADR LINE 10
I SP19 ADR LINE 11
I SP12 ADR LINE 12
I SP1 ADR LINE 13
I SP17 ADR LINE 14
I SP10 ADR LINE 15
I SP23 ADR LINE 16
I SP32 ADR LINE 17

// 4.08 RESET CKTS #1
I SP62 OPERATORS RESET LINE

// 4.09 RESET CKTS #2
I SP60 RESET STORAGE TO ZEROS

I SP_RES Reset

.Logic
reg [12:0] SAR=0;
reg [35:0] SBR=0;
reg [35:0] Mem[8191:0];


wire [12:0] Adress_Bus;
assign Adress_Bus= {SP80,SP7,SP16,SP5,SP14,SP3,SP19,SP12,SP1,SP17,SP10,SP23,SP32};

wire [12:0] Set_SAR;
assign Set_SAR=Adress_Bus&{13{SP51}};  //  SAR RI & Turn on Rd Bias Gate 

genvar i;

for(i=0;i<13;i=i+1)
  always @*   // Reset SAR & Buffer Reg
    if(SP30|SP_RES) // Reset SAR & Buffer Reg
      SAR[i]=0;
   else if(Set_SAR[i])
      SAR[i]=1;

wire ReadCntl_0_2;
wire ReadCntl_3_17;
wire ReadCntl_18_20;
wire ReadCntl_21_35;
wire WriteCntl_0_2=0;
wire WriteCntl_3_17=0;
wire WriteCntl_18_20=0;
wire WriteCntl_21_35=0;

assign WriteCntl_0_2=0;
assign WriteCntl_3_17=0;
assign WriteCntl_18_20=0;
assign WriteCntl_21_35=0;
assign ReadCntl_0_2=~WriteCntl_0_2;
assign ReadCntl_3_17=~WriteCntl_3_17;
assign ReadCntl_18_20=~WriteCntl_18_20;
assign ReadCntl_21_35=~WriteCntl_21_35;

wire [35:0] ReadCntl;
assign ReadCntl={ {3{ReadCntl_0_2}},
                 {15{ReadCntl_3_17}},
                  {3{ReadCntl_18_20}},
                 {15{ReadCntl_21_35}}
                } & {36{SP53}}; // RO Sample
                
wire [35:0] WriteCntl;
assign WriteCntl={ {3{WriteCntl_0_2}},
                   {15{WriteCntl_3_17}},
                   {3{WriteCntl_18_20}},
                   {15{WriteCntl_21_35}}
                 } &{36{SP28}}; // Read in Sample 

wire [35:0] SetSbr;

wire [35:0] Storage_Bus_i;

assign Storage_Bus_i={SP69_i,SP85_i,SP101_i,SP117_i,SP133_i,SP149_i,SP78_i,SP94_i,SP110_i,SP126_i,SP142_i,SP119_i,
                    SP67_i,SP83_i,SP99_i,SP115_i,SP131_i,SP147_i,SP76_i,SP92_i,SP108_i,SP124_i,SP140_i,SP128_i,
					SP65_i,SP81_i,SP97_i,SP113_i,SP129_i,SP144_i,SP74_i,SP90_i,SP106_i,SP122_i,SP138_i,SP135_i};

assign SetSbr= (ReadCntl&Mem[SAR])|(WriteCntl&Storage_Bus_i);


for(i=0;i<36;i=i+1)
  always @*      
    if(SP30|SP_RES) // Reset SAR & Buffer Reg
      SBR[i]=0;   
    else if(SetSbr[i])
      SBR[i]=1;

always @(negedge SP28) // Read in Sample 
   Mem[SAR]<=SBR;

assign {SP69_o,SP85_o,SP101_o,SP117_o,SP133_o,SP149_o,SP78_o,SP94_o,SP110_o,SP126_o,SP142_o,SP119_o,
        SP67_o,SP83_o,SP99_o,SP115_o,SP131_o,SP147_o,SP76_o,SP92_o,SP108_o,SP124_o,SP140_o,SP128_o,
		SP65_o,SP81_o,SP97_o,SP113_o,SP129_o,SP144_o,SP74_o,SP90_o,SP106_o,SP122_o,SP138_o,SP135_o}=SBR;


assign SPR1=0; // STG START / STOP CNTL

.End